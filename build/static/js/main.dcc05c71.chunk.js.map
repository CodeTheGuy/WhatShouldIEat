{"version":3,"sources":["recipe.module.css","Recipe.js","components/NavBar/index.js","constants/routes.js","components/Landing/index.js","components/SignIn/index.js","components/SignOut/index.js","components/Home/index.js","components/Account/index.js","components/Admin/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","Navbar","id","to","Landing","SignIn","SignOut","Home","Account","Admin","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","name","setName","email","setEmail","url","setUrl","responseGoogle","response","profileObj","imageUrl","a","fetch","json","data","hits","exact","path","component","clientId","buttonText","onSuccess","onFailure","cookiePolicy","onSubmit","e","preventDefault","type","value","onChange","target","console","log","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcc05c71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2vNvl\",\"image\":\"recipe_image__29Ax2\"};","import React from 'react';\r\nimport style from './recipe.module.css';\r\nconst Recipe = ({title,calories,image,ingredients}) => {\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient =>(\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>{calories}</p>\r\n            <img className={style.image} src={image} alt=\"\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as ROUTES from '../../constants/routes';\r\nconst Navbar = () => (\r\n  <div>\r\n    <ul id = \"nav\">\r\n      <li>\r\n        <Link to={ROUTES.SIGN_IN}>Sign In</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.SIGN_OUT}>Sign Out</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.LANDING}>Landing</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.HOME}>Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.ACCOUNT}>Account</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.ADMIN}>Admin</Link>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\nexport default Navbar;","export const LANDING = '/';\r\nexport const SIGN_OUT = '/signout';\r\nexport const SIGN_IN = '/signin';\r\nexport const HOME = '/home';\r\nexport const ACCOUNT = '/account';\r\nexport const ADMIN = '/admin';","import React from 'react';\r\nconst Landing = () => (\r\n  <div>\r\n    <h1>Landing</h1>\r\n  </div>\r\n);\r\nexport default Landing;","import React from 'react';\r\n\r\nconst SignIn = () => (\r\n\r\n  <div>\r\n    <h1>Sign In</h1>\r\n  </div>\r\n);\r\nexport default SignIn;","import React from 'react';\r\nconst SignOut = () => (\r\n  <div>\r\n    <h1>SignOut</h1>\r\n  </div>\r\n);\r\nexport default SignOut;","import React from 'react';\r\nconst Home = () => (\r\n  <div>\r\n    <h1>Home</h1>\r\n  </div>\r\n);\r\nexport default Home;","import React from 'react';\r\nconst Account = () => (\r\n  <div>\r\n    <h1>Account</h1>\r\n  </div>\r\n);\r\nexport default Account;","import React from 'react';\r\nconst Admin = () => (\r\n  <div>\r\n    <h1>Admin</h1>\r\n  </div>\r\n);\r\nexport default Admin;","import React, { useEffect, useState } from \"react\";\r\nimport Recipe from \"./Recipe\";\r\nimport \"./App.css\";\r\nimport GoogleLogin from \"react-google-login\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Navbar from \"./components/NavBar\";\r\nimport Landing from \"./components/Landing\";\r\nimport SignIn from \"./components/SignIn\";\r\nimport SignOut from \"./components/SignOut\";\r\nimport Home from \"./components/Home\";\r\nimport Account from \"./components/Account\";\r\nimport Admin from \"./components/Admin\";\r\nimport * as ROUTES from \"./constants/routes\";\r\n\r\nconst App = () => {\r\n  //These are taken from the edamam API\r\n  const APP_ID = \"d6555000\";\r\n  const APP_KEY = \"7cb56f715642c34bb6ba13ef7fbb23a1\";\r\n\r\n  //Contructors, recipes\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState(\"Chicken\");\r\n  useEffect(() => {\r\n    getRecipes();\r\n  }, [query]);\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  const [url, setUrl] = useState(\"\");\r\n\r\n  const responseGoogle = response => {\r\n    setName(response.profileObj.name);\r\n    setEmail(response.profileObj.email);\r\n    setUrl(response.profileObj.imageUrl);\r\n  };\r\n\r\n  //Gets recipe information\r\n  const getRecipes = async () => {\r\n    const response = await fetch(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n    );\r\n    const data = await response.json();\r\n    setRecipes(data.hits);\r\n  };\r\n\r\n  //A gate that allows the target search to go through after search has been clicked\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n    console.log(search);\r\n  };\r\n\r\n  //Search bar UI, allows the search bar to be clicked to input information\r\n  const getSearch = e => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch(\"\");\r\n  };\r\n\r\n  //Creates all the front end information by fetching info from the recipe API\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <div>\r\n          <Navbar />\r\n\r\n          <hr />\r\n          <Route exact path={ROUTES.LANDING} component={Landing} />\r\n          <Route path={ROUTES.SIGN_OUT} component={SignOut} />\r\n          <Route path={ROUTES.SIGN_IN} component={SignIn} />\r\n          <Route path={ROUTES.HOME} component={Home} />\r\n          <Route path={ROUTES.ACCOUNT} component={Account} />\r\n          <Route path={ROUTES.ADMIN} component={Admin} />\r\n        </div>\r\n      </Router>\r\n      <h1>Login with Google</h1>\r\n      <h2>Welcome: {name}</h2>\r\n      <h2>Email: {email}</h2>\r\n      <image src={url} alt={name} />\r\n      <GoogleLogin\r\n        clientId=\"421424544018-v6q46o2c5s4kbk4cuenj6fmnea2bsnpk.apps.googleusercontent.com\"\r\n        buttonText=\"Login\"\r\n        onSuccess={responseGoogle}\r\n        onFailure={responseGoogle}\r\n        cookiePolicy={\"single_host_origin\"}\r\n      />\r\n\r\n      <div className=\"App\">\r\n        <form onSubmit={getSearch} className=\"search-form\">\r\n          <input\r\n            className=\"search-bar\"\r\n            type=\"text\"\r\n            value={search}\r\n            onChange={updateSearch}\r\n          />\r\n          <button className=\"search-button\" type=\"submit\">\r\n            Search\r\n          </button>\r\n        </form>\r\n        <div className=\"recipes\">\r\n          {recipes.map(recipe => (\r\n            <Recipe\r\n              key={recipe.recipe.label}\r\n              title={recipe.recipe.label}\r\n              calories={recipe.recipe.calories}\r\n              image={recipe.recipe.image}\r\n              ingredients={recipe.recipe.ingredients}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n// Brian was here\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}